package lab7;

import lab7.Node;

public class LinkedList<T> {

	private Node<T> first;
	private Node<T> last;
	private int size;

	public LinkedList() {
		this.first = null;
		this.last = null;
		this.size = 0;
	}

	// Inserts objects into LinkedList.
	public void push(T data) {
		Node<T> n = new Node<T>(data);
		if (isEmpty()) {
			first = n;
			last = n;
		} else {
			last.next = n;
			n.prev = last;
			last = n;
		}
		size++;
	}

	// Checks if the LinkedList contains any items.
	public boolean isEmpty() {
		return size == 0;
	}

	// Returns the first node (by Johanna)
	public T first() {
		if (isEmpty()) {
			System.out.println("You have no first node");
		}
		return first.getValue();
	}

	// Returns the number of items in the LinkedList.
	public int size() {
		return size;
	}

	// Reverses order of LinkedList (head becomes last node).
	public void reverse() {
		Node<T> f = first;
		first = last;
		while (last != null) {
			last.next = last.prev;
			last = last.prev;
		}
		last = f;
	}

	// Removes all objects from LinkedList that are equal to object.
	public boolean delete(T object) {
		boolean deleted_objects = false;
		Node<T> current = first;
		while (current != null) {
			if (current.getValue() == object) {
				if (current == first) {
					first = first.next;
				} else {
					current.prev.next = current.next;
				}
				last = last.prev;
				deleted_objects = true;
				size--;
			}
			current = current.next;
		}
		return deleted_objects;
	}

	public String toString() {
		Node<T> current = first;
		String text = "This is your list: ";

		while (current != null) {
			text += current.getValue() + " ";
			current = current.next;
		}
		return text;
	}
}
